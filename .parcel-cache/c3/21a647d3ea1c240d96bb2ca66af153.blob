var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadRecipe", function () {
  return loadRecipe;
});
_parcelHelpers.export(exports, "loadSearchResult", function () {
  return loadSearchResult;
});
_parcelHelpers.export(exports, "getSearchResult", function () {
  return getSearchResult;
});
_parcelHelpers.export(exports, "updateServing", function () {
  return updateServing;
});
var _config = require('./config');
var _helper = require('./helper');
const state = {
  recipe: {},
  search: {
    query: '',
    result: [],
    page: 1,
    resultPerPage: 10
  }
};
const loadRecipe = async function (id) {
  try {
    if (!id) return;
    let recipe = await _helper.getJson(`${_config.URL_API}/${id}`);
    recipe = recipe.recipe;
    state.recipe = {
      publisher: recipe.publisher,
      image: recipe.image_url,
      ingredients: recipe.ingredients,
      id: recipe.id,
      title: recipe.title,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      sourceUrl: recipe.source_url
    };
  } catch (err) {
    throw err;
  }
};
const loadSearchResult = async function (query) {
  try {
    if (!query) return;
    const data = await _helper.getJson(`${_config.URL_API}?search=${query}`);
    state.search.result = data.recipes.map(rec => {
      return {
        publisher: rec.publisher,
        image: rec.image_url,
        id: rec.id,
        title: rec.title
      };
    });
  } catch (err) {
    throw err;
  }
};
const getSearchResult = function (page = this.state.page) {
  this.state.search.page = page;
  const totalp = Math.ceil(this.state.search.result.length / 10);
  const start = (page - 1) * 10;
  const end = page * 10;
  console.log(state.search.result.slice(start, end));
  return state.search.result.slice(start, end);
};
const updateServing = function (newserving) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newserving / state.recipe.servings;
  });
};
